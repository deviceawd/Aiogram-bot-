import re
import sys
import redis
import json
import logging
import importlib

from typing import Dict, Optional, Tuple
from aiogram import Bot
from telethon import TelegramClient
import sys
from pathlib import Path
from config import REDIS_URL, REDIS_DB
import config  # —Ç–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ —Å TELEGRAM_API_ID –∏ TELEGRAM_API_HASH

# üìå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ Telethon ‚Äî —Å–æ–∑–¥–∞—ë–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
BASE_DIR = Path(__file__).resolve().parent
SESSION_FILE = BASE_DIR / "rates_session.session"

logger = logging.getLogger(__name__)

class ChannelRatesParser:
    def __init__(self, bot: Bot, channel_username: str = "@obmenvalut13"):
        self.bot = bot
        self.channel_username = channel_username

        # Redis
        self.redis_client =redis.Redis.from_url(
            REDIS_URL, 
            db=REDIS_DB,
            decode_responses=True,
            socket_timeout=3
        )
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ config.py
        cfg = importlib.import_module("config")
        self.tg_api_id = getattr(cfg, "TELEGRAM_API_ID", 0)
        self.tg_api_hash = getattr(cfg, "TELEGRAM_API_HASH", "")

        # Telethon –∫–ª–∏–µ–Ω—Ç
        self.telethon_client = TelegramClient(str(SESSION_FILE), config.TELEGRAM_API_ID, config.TELEGRAM_API_HASH)


    async def get_latest_rates(self) -> Dict[str, Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã"""
        try:
            cached_rates = self.redis_client.get('currency_rates')
            if cached_rates:
                return json.loads(cached_rates)

            rates = await self._parse_channel_rates()
            if rates:
                self.redis_client.setex('currency_rates', self.cache_ttl, json.dumps(rates))
                return rates

            return self._get_default_rates()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤")
            return self._get_default_rates()

    async def _parse_channel_rates(self) -> Optional[Dict[str, Dict]]:
        if not self.telethon_client:
            logger.error("Telethon –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ—Ç api_id/api_hash –≤ config.py)")
            return None
        try:
            await self.telethon_client.connect()
            if not await self.telethon_client.is_user_authorized():
                logger.error("Telethon –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏ scripts/telethon_login.py –æ–¥–∏–Ω —Ä–∞–∑.")
                return None

            entity = await self.telethon_client.get_entity(self.channel_username)
            async for msg in self.telethon_client.iter_messages(entity, limit=10):
                text = (msg.message or "") if hasattr(msg, "message") else ""
                if not text:
                    continue
                rates = self._extract_rates_from_text(text)
                if rates:
                    logger.info(f"–ö—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞: {rates}")
                    return rates
            return None
        except Exception:
            logger.exception("Telethon error")
            return None
        finally:
            try:
                await self.telethon_client.disconnect()
            except Exception:
                pass

    def _extract_rates_from_text(self, text: str) -> Optional[Dict[str, Dict]]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç"""
        t = text.replace(',', '.').replace('‚Äî', '-').replace('‚Äì', '-')
        rates: Dict[str, Dict] = {}

        pattern = re.compile(
            r"(USD|EUR|GBP|PLN)\s+([0-9]+(?:\.[0-9]+)?)\s*-\s*([0-9]+(?:\.[0-9]+)?)(?:\s+([^\n]+))?",
            re.IGNORECASE
        )

        for match in pattern.finditer(t):
            cur = match.group(1).upper()
            buy = float(match.group(2))
            sell = float(match.group(3))
            label = (match.group(4) or "").strip().lower()

            pair_key = f"{cur}-UAH"
            if pair_key not in rates:
                rates[pair_key] = {}

            if "1000" in label or "–æ–ø—Ç" in label or "–≤—ñ–¥" in label:
                rates[pair_key]["wholesale"] = {"buy": buy, "sell": sell}
            else:
                rates[pair_key]["retail"] = {"buy": buy, "sell": sell}

        return rates if rates else None

    def _get_default_rates(self) -> Dict[str, Dict]:
        """–ö—É—Ä—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'USD-UAH': {'retail': {'buy': 38.50, 'sell': 38.80}},
            'EUR-UAH': {'retail': {'buy': 41.20, 'sell': 41.50}},
            'GBP-UAH': {'retail': {'buy': 48.80, 'sell': 49.20}},
            'PLN-UAH': {'retail': {'buy': 9.80, 'sell': 9.95}}
        }

    def get_specific_rate(self, currency_pair: str) -> Optional[Tuple[float, float]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç retail –∫—É—Ä—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ"""
        try:
            rates = self.redis_client.get('currency_rates')
            if rates:
                rd = json.loads(rates).get(currency_pair, {}).get("retail")
                if rd:
                    return rd['buy'], rd['sell']
            return None
        except Exception:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {currency_pair}")
            return None

    async def force_refresh_rates(self) -> Dict[str, Dict]:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤"""
        self.redis_client.delete('currency_rates')
        return await self.get_latest_rates()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
channel_rates_parser = None
