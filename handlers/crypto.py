from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton




from google_utils import get_wallet_address, save_transaction_hash, verify_transaction, update_transaction_status
from utils.validators import is_valid_tx_hash
from utils.extract_hash_in_url import extract_tx_hash
from keyboards import get_network_keyboard_with_back, get_back_keyboard, get_crypto_operation_keyboard, get_action_keyboard
from utils.generate_qr_code import generate_wallet_qr
from utils.commission_calculator import commission_calculator
from localization import get_message

from config import logger

WALLET_SHEET_URL = "https://docs.google.com/spreadsheets/d/1qUhwJPPDJE-NhcHoGQsIRebSCm_gE8H6K7XSKxGVcIo/export?format=csv&gid=2135417046"
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CryptoFSM(StatesGroup):
    operation = State()  # –ö—É–ø–∏—Ç—å USDT / –ü—Ä–æ–¥–∞—Ç—å USDT
    network = State()
    amount = State()
    client_wallet = State()  # –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ö—É–ø–∏—Ç—å USDT"
    transaction_hash = State()  # –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ü—Ä–æ–¥–∞—Ç—å USDT"
    client_name = State()  # –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ö—É–ø–∏—Ç—å USDT" - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    contact = State()
    verification = State()

# –ö–æ–º–∞–Ω–¥–∞ /crypto
async def start_crypto(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    await message.answer(get_message("choose_crypto_operation", lang), reply_markup=get_crypto_operation_keyboard(lang))
    await state.set_state(CryptoFSM.operation)

async def set_crypto_operation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    text = message.text
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    if get_message("back", lang) in text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    if text not in (get_message("crypto_buy_usdt", lang), get_message("crypto_sell_usdt", lang)):
        await message.answer(get_message("choose_crypto_operation", lang), reply_markup=get_crypto_operation_keyboard(lang))
        return
    await state.update_data(operation=text)
    await message.answer(get_message("choose_network", lang), reply_markup=get_network_keyboard_with_back(lang))
    await state.set_state(CryptoFSM.network)

# –í—ã–±–æ—Ä —Å–µ—Ç–∏
async def get_network(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in message.text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    if get_message("back", lang) in message.text:
        await message.answer(get_message("choose_crypto_operation", lang), reply_markup=get_crypto_operation_keyboard(lang))
        await state.set_state(CryptoFSM.operation)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å
    if message.text not in ["ERC20", "TRC20"]:
        await message.answer(get_message("choose_network", lang), reply_markup=get_network_keyboard_with_back(lang))
        return
    
    await state.update_data(network=message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
    operation_data = await state.get_data()
    operation = operation_data.get('operation', '').strip()
    
    # QR –∫–æ–¥ –∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ USDT
    if operation == get_message("crypto_sell_usdt", operation_data.get("language", "ru")):
        wallet_address = get_wallet_address(message.text)
        await state.update_data(wallet_address=wallet_address)
        
        if wallet_address:
            logo_path = "img/logo-qr.png"
            await message.answer(
                get_message("send_to_address", operation_data.get("language", "ru"), wallet_address=wallet_address, network=message.text),
                parse_mode="Markdown"
            )
            await generate_wallet_qr(message.bot, message.chat.id, wallet_address, message.text, logo_path, operation_data.get("language", "ru"))
        else:
            await message.answer(get_message("address_error", operation_data.get("language", "ru")))
    
    await message.answer(get_message("enter_amount", operation_data.get("language", "ru")), reply_markup=get_back_keyboard(operation_data.get("language", "ru")))
    await state.set_state(CryptoFSM.amount)

# –í–≤–æ–¥ —Å—É–º–º—ã
async def get_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in message.text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    if get_message("back", lang) in message.text:
        await message.answer(get_message("choose_network", lang), reply_markup=get_network_keyboard_with_back(lang))
        await state.set_state(CryptoFSM.network)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer(get_message("invalid_amount", lang))
            return
    except ValueError:
        await message.answer(get_message("invalid_amount", lang))
        return
    
    await state.update_data(amount=amount)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    op = (data.get('operation') or '').strip()
    exchange_rate = commission_calculator.get_exchange_rate()
    
    if op == get_message("crypto_buy_usdt", lang):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å USDT - –≤–≤–æ–¥–∏—Ç –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É USDT
        # –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –≤ USD
        commission_result = commission_calculator.calculate_commission('USD_to_USDT', amount, exchange_rate)
        
        if commission_result['success']:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –∫–æ–º–∏—Å—Å–∏–∏
            if commission_result['manager_required']:
                commission_note = get_message("commission_manager_required", lang)
            elif commission_result['commission_type'] == 'percentage':
                commission_note = get_message("commission_percentage", lang, percentage=commission_result['commission_value'])
            elif commission_result['commission_type'] == 'fixed':
                commission_note = get_message("commission_fixed", lang, amount=commission_result['commission_value'])
            else:
                commission_note = ""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç: —Å–∫–æ–ª—å–∫–æ USDT –ø–æ–ª—É—á–∏—Ç –∏ —Å–∫–æ–ª—å–∫–æ USD –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å
            await message.answer(
                f" *–†–∞—Å—á–µ—Ç –ø–æ–∫—É–ø–∫–∏ USDT*\n\n"
                f"üéØ –ñ–µ–ª–∞–µ–º–∞—è —Å—É–º–º–∞: {amount:.2f} USDT\n"
                f"üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {exchange_rate or '–ù–µ —É–∫–∞–∑–∞–Ω'} USD/USDT\n"
                f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission_result['commission_amount']:.2f} USD\n"
                f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {commission_result['final_amount']:.2f} USD\n\n"
                f"{commission_note}",
                parse_mode="Markdown"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
            await state.update_data(
                usdt_amount=amount,  # —Å–∫–æ–ª—å–∫–æ USDT —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å
                usd_to_pay=commission_result['final_amount']  # —Å–∫–æ–ª—å–∫–æ USD –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å
            )
            
            # –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ USDT —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            await message.answer(get_message("enter_name", lang), reply_markup=get_back_keyboard(lang))
            await state.set_state(CryptoFSM.client_name)
            
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏: {commission_result['error']}")
            
    else:
        # –ü—Ä–æ–¥–∞–∂–∞ USDT - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É USDT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        # –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ USD –æ–Ω –ø–æ–ª—É—á–∏—Ç
        commission_result = commission_calculator.calculate_commission('USDT_to_USD', amount, exchange_rate)
        
        if commission_result['success']:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –∫–æ–º–∏—Å—Å–∏–∏
            if commission_result['manager_required']:
                commission_note = get_message("commission_manager_required", lang)
            elif commission_result['commission_type'] == 'percentage':
                commission_note = get_message("commission_percentage", lang, percentage=commission_result['commission_value'])
            elif commission_result['commission_type'] == 'fixed':
                commission_note = get_message("commission_fixed", lang, amount=commission_result['commission_value'])
            else:
                commission_note = ""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç: —Å–∫–æ–ª—å–∫–æ USDT –ø—Ä–æ–¥–∞–µ—Ç –∏ —Å–∫–æ–ª—å–∫–æ USD –ø–æ–ª—É—á–∏—Ç
            await message.answer(
                f" *–†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ USDT*\n\n"
                f" –°—É–º–º–∞ –∫ –ø—Ä–æ–¥–∞–∂–µ: {amount:.2f} USDT\n"
                f"üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {exchange_rate or '–ù–µ —É–∫–∞–∑–∞–Ω'} USD/USDT\n"
                f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission_result['commission_amount']:.2f} USD\n"
                f"üíµ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {commission_result['final_amount']:.2f} USD\n\n"
                f"{commission_note}",
                parse_mode="Markdown"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
            await state.update_data(
                usdt_amount=amount,  # —Å–∫–æ–ª—å–∫–æ USDT –ø—Ä–æ–¥–∞–µ—Ç
                usd_to_receive=commission_result['final_amount']  # —Å–∫–æ–ª—å–∫–æ USD –ø–æ–ª—É—á–∏—Ç
            )
            
            # –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ USDT –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–∞–¥—Ä–µ—Å —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∏)
            final_amount = f"{commission_result['final_amount']:.2f}"
            await message.answer(
                f"{get_message('sell_instruction_header', lang)}\n\n"
                f"{get_message('sell_instruction_step1', lang, amount=f'{amount:.2f}')}\n"
                f"{get_message('sell_instruction_step2', lang)}\n"
                f"{get_message('sell_instruction_step3', lang)}\n\n"
                f"{get_message('sell_instruction_final', lang, amount=final_amount)}",
                parse_mode="Markdown"
            )
            
            await message.answer(get_message("enter_tx_hash", lang), reply_markup=get_back_keyboard(lang))
            await state.set_state(CryptoFSM.transaction_hash)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏: {commission_result['error']}")

# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDT)
async def get_client_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in message.text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    if get_message("back", lang) in message.text:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        await message.answer(get_message("enter_amount", lang), reply_markup=get_back_keyboard(lang))
        await state.set_state(CryptoFSM.amount)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(client_name=message.text.strip())
    
    # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(get_message("enter_phone", lang), reply_markup=get_back_keyboard(lang))
    await state.set_state(CryptoFSM.contact)

async def get_client_wallet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in message.text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    if get_message("back", lang) in message.text:
        await message.answer(get_message("enter_amount", lang), reply_markup=get_back_keyboard(lang))
        await state.set_state(CryptoFSM.amount)
        return
    await state.update_data(client_wallet=message.text.strip())
    await message.answer(get_message("enter_phone", lang), reply_markup=get_back_keyboard(lang))
    await state.set_state(CryptoFSM.contact)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def get_transaction_hash(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in message.text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    if get_message("back", lang) in message.text:
        await message.answer(get_message("enter_amount", lang), reply_markup=get_back_keyboard(lang))
        await state.set_state(CryptoFSM.amount)
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id  
    me = await message.bot.get_me()
    bot_id = me.id 

    user_input = message.text.strip()
    tx_hash = extract_tx_hash(user_input) #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if not tx_hash:
        await message.answer(get_message("invalid_tx_hash", lang))
        return
    await state.update_data(transaction_hash=tx_hash)
    await message.answer(get_message("checking_tx", lang))
    data = await state.get_data()
    network = data.get('network')
    logger.info("–ü–æ–ª—É—á–µ–Ω –Ω–µ—Ç–≤–æ—Ä–∫: %s", network)
    wallet_address = get_wallet_address(network)
    if not is_valid_tx_hash(tx_hash, network): #–µ—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        await message.answer(get_message("invalid_tx_format", lang))
        return
    verification_result = await verify_transaction(
        tx_hash, 
        network, 
        wallet_address,
        int(user_id),
        int(chat_id),
        int(bot_id),
        lang
    )
    
    # # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    # if verification_result.get("success"):
    #     await state.update_data(amount_result=verification_result.get('amount', 'N/A'))
    #     await message.answer(
    #         get_message(
    #             "tx_confirmed", lang,
    #             amount=verification_result.get('amount', 'N/A'),
    #             from_addr=verification_result.get('from', 'N/A')[:10] + '...',
    #             timestamp=verification_result.get('timestamp', 'N/A')
    #         ),
    #         reply_markup=get_back_keyboard(lang)
    #     )
    #     save_transaction_hash(
    #         message.from_user.username or str(message.from_user.id),
    #         tx_hash,
    #         wallet_address,
    #         "PENDING"
    #     )
    #     await state.set_state(CryptoFSM.contact)
    # else:
    #     error_msg = verification_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    #     await message.answer(
    #         get_message("tx_not_confirmed", lang, error=error_msg),
    #         reply_markup=get_back_keyboard(lang)
    #     )
    #     await state.set_state(CryptoFSM.transaction_hash)

async def send_telegram_notification(chat_id: str, msg):
    from aiogram import Bot
    from config import logger, TOKEN

    bot = Bot(token=TOKEN)
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    
    try:        
        await bot.send_message(
            chat_id=chat_id, 
            text=get_message(
                msg["msg_status"], 
                msg["lang"],
                amount=msg.get('amount_result', 'N/A'),
                from_addr=msg.get('target_address'),
                timestamp=msg.get('timestamp', 'N/A')
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")


# –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    logger.info(f"[crypto] -------   get_contact data: {data}")
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in message.text:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    op = (data.get('operation') or '').strip()
    logger.info(f"[crypto] -------   get_contact op: {op}")
    if get_message("back", lang) in message.text:
        if op == get_message("crypto_buy_usdt", lang):
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            await message.answer(get_message("enter_name", lang), reply_markup=get_back_keyboard(lang))
            await state.set_state(CryptoFSM.client_name)
        else:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ö–µ—à–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            await message.answer(get_message("enter_tx_hash", lang), reply_markup=get_back_keyboard(lang))
            await state.set_state(CryptoFSM.transaction_hash)
        return
    
    await state.update_data(contact=message.text)
    
    if op == get_message("crypto_buy_usdt", lang):
        # –î–ª—è –ø–æ–∫—É–ø–∫–∏ USDT - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        summary = (
            f"üü¢ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –ö—É–ø–∏—Ç—å USDT*\n\n"
            f"üë§ –ò–º—è: {data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üåê –°–µ—Ç—å: {data.get('network', '')}\n"
            f"üéØ –ñ–µ–ª–∞–µ–º–∞—è —Å—É–º–º–∞: {data.get('usdt_amount', '')} USDT\n"
            f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {data.get('usd_to_pay', '')} USD\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact', '')}\n"
            f"üë§ Telegram: @{message.from_user.username if message.from_user.username else 'N/A'}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        from config import ADMIN_CHAT_ID
        await message.bot.send_message(ADMIN_CHAT_ID, summary, parse_mode="Markdown")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ *–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n"
            f"üë§ –ò–º—è: {data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üéØ –°—É–º–º–∞: {data.get('usdt_amount', '')} USDT\n"
            f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {data.get('usd_to_pay', '')} USD\n"
            f"üåê –°–µ—Ç—å: {data.get('network', '')}\n\n"
            f"üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode="Markdown"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ USDT - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
        data = await state.get_data()
        summary = get_message(
            "crypto_request_summary", lang,
            amount=data.get('amount_result', data.get('amount', 'N/A')),
            network=data['network'],
            wallet_address=data['target_address'],
            tx_hash=data['transaction_hash'],
            contact=data['contact'],
            username=message.from_user.username if message.from_user.username else 'N/A'
        )
        from config import ADMIN_CHAT_ID
        await message.bot.send_message(ADMIN_CHAT_ID, summary)
        await message.answer(
            get_message("crypto_request_success", lang, summary=summary)
        )
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç: {ADMIN_CHAT_ID}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Google Sheets –î–û –æ—á–∏—Å—Ç–∫–∏ state!
        # row_data = {
        #     'currency': 'USDT',  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        #     'amount': data.get('amount_result', data.get('amount', '')),
        #     'network': data.get('network', ''),
        #     'wallet_address': data.get('wallet_address', ''),
        #     'visit_time': '',  # –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        #     'client_name': '', # –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        #     'phone': data.get('contact', ''),
        #     'telegram': message.from_user.username or ''
        # }

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É
        # success = save_crypto_request_to_sheet(row_data)
        change_param = f"{str(data.get('contact', ''))}/{message.from_user.username or ''}"
        google_update_params = {
            "contact": [change_param, 9]
        }
        success = update_transaction_status(data['transaction_hash'], google_update_params)
        # if not success:
        #     await message.answer(get_message("google_sheet_error", lang))

        await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_crypto_handlers(dp: Dispatcher):
    dp.message.register(start_crypto, Command("crypto"))
    dp.message.register(set_crypto_operation, StateFilter(CryptoFSM.operation))
    dp.message.register(get_network, StateFilter(CryptoFSM.network))
    dp.message.register(get_amount, StateFilter(CryptoFSM.amount))
    dp.message.register(get_client_name, StateFilter(CryptoFSM.client_name))
    dp.message.register(get_client_wallet, StateFilter(CryptoFSM.client_wallet))
    dp.message.register(get_transaction_hash, StateFilter(CryptoFSM.transaction_hash))
    dp.message.register(get_contact, StateFilter(CryptoFSM.contact))

